'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var Player = function (_Actor) {
  _inherits(Player, _Actor);

  function Player() {
    _classCallCheck(this, Player);

    return _possibleConstructorReturn(this, (Player.__proto__ || Object.getPrototypeOf(Player)).call(this, document.createElement('div')));
  }

  _createClass(Player, [{
    key: 'preload',
    value: function preload() {
      this.vx = 5;
      this.vy = 5;

      this.styleElement({
        "position": 'absolute',
        "background-color": 'orange'
      });

      this.setBounds({
        height: 50,
        width: 50,
        x: 200,
        y: 200
      });

      this.inputHandler = new InputHandler();
      this.inputHandler.targetEvents(document, {
        keydown: true,
        keyup: true
      });
    }
  }, {
    key: 'render',
    value: function render() {
      /**if (this.stage.checkCollisions(this).length > 0) this.styleElement({
        "background-color": 'green'
      });
      else this.styleElement({
        "background-color": "red"
      });**/
    }
  }, {
    key: 'update',
    value: function update() {
      if (this.inputHandler.keys[87]) this.y -= this.vy;
      if (this.inputHandler.keys[83]) this.y += this.vy;
      if (this.inputHandler.keys[65]) this.x -= this.vx;
      if (this.inputHandler.keys[68]) this.x += this.vx;
      this.setBounds({
        x: this.x,
        y: this.y
      });

      /** IF YOU WANT TO COLLIDE
      if (this.stage.checkCollisions(this)[0] instanceof Tile) {
        this.setLocation(before);
      }
      **/
    }
  }]);

  return Player;
}(Actor);

var Tile = function (_Actor2) {
  _inherits(Tile, _Actor2);

  function Tile() {
    _classCallCheck(this, Tile);

    return _possibleConstructorReturn(this, (Tile.__proto__ || Object.getPrototypeOf(Tile)).call(this, document.createElement('div')));
  }

  _createClass(Tile, [{
    key: 'preload',
    value: function preload() {
      var obj = this;
      obj.styleElement({
        "position": 'absolute',
        "background-color": 'yellow'
      });
      obj.setBounds({
        width: 50,
        height: 50,
        x: Math.floor(Math.random() * 500),
        y: Math.floor(Math.random() * 500)
      });
    }
  }]);

  return Tile;
}(Actor);

var c = new Stage(document.getElementById("stage"));
c.styleElement({
  "background-color": "#000000",
  "position": "relative",
  "border-style": "solid",
  "border-color": "white"
});

c.setBounds({
  width: 300,
  height: 300,
  x: 0,
  y: 0
});

c.start(60, 60);

var tiles = [new Tile(), new Tile(), new Tile()];
tiles.forEach(function (t) {
  c.addActor(t);
});

var p1 = new Player();
c.addActor(p1);